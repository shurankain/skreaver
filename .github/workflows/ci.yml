name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SOURCE_DATE_EPOCH: 1609459200  # Deterministic builds

jobs:
  # Fast validation job - basic compilation and tests without heavy features
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.name || 'check' }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
        
      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.4
        
      - name: Configure sccache
        run: echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        
      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=mold" >> $GITHUB_ENV
          
      - name: Cargo check (core only)
        run: cargo check --workspace --no-default-features
        
      - name: Cargo check (default features)
        run: cargo check --workspace

  # Security scanning and validation
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-security
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Install cargo-deny
        run: |
          if ! command -v cargo-deny &> /dev/null; then
            cargo install --locked cargo-deny
          fi

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install --locked cargo-audit
          fi

      - name: Run cargo-deny
        run: cargo deny check
        continue-on-error: true

      - name: Run cargo-audit
        run: cargo audit --deny warnings
        continue-on-error: true

  # Matrix testing job - test different feature combinations in parallel
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [check, security]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Core functionality
          - name: "Core"
            features: "--workspace"
            test_args: ""

          # Testing framework
          - name: "Testing"
            features: "--package skreaver-testing"
            test_args: ""

          # CLI tools
          - name: "CLI"
            features: "--package skreaver-cli"
            test_args: ""

    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.name || 'check' }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
        
      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.4
        
      - name: Configure sccache
        run: echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        
      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=mold" >> $GITHUB_ENV
          
        
      - name: Run tests (${{ matrix.name }})
        run: |
          if [ -n "${{ matrix.features }}" ]; then
            cargo test ${{ matrix.features }} ${{ matrix.test_args }} --verbose
          else
            cargo test ${{ matrix.test_args }} --verbose
          fi

  # Benchmarks and performance validation with regression detection
  bench:
    name: Benchmarks & Regression Detection
    runs-on: ubuntu-latest
    needs: check
    env:
      SKREAVER_BASELINE_DIR: target/performance-baselines
      SKREAVER_ENABLE_REGRESSION_DETECTION: true
      # Reduce Criterion disk usage
      CRITERION_OUTPUT_DIRECTORY: target/criterion-ci
      CRITERION_DISABLE_HTML: "1"
      CRITERION_DISABLE_GNUPLOT: "1"
      CRITERION_SAMPLE_SIZE: "10"
      CRITERION_MEASUREMENT_TIME: "5"
      CRITERION_WARM_UP_TIME: "1"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for baseline comparison

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/debug/deps
            target/release/deps
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-bench-v2
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-bench-v2
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Restore performance baselines
        uses: actions/cache/restore@v4
        with:
          path: target/performance-baselines
          key: perf-baselines-${{ github.repository }}-${{ github.ref_name }}
          restore-keys: |
            perf-baselines-${{ github.repository }}-main
            perf-baselines-${{ github.repository }}-

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Configure sccache
        run: echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=mold" >> $GITHUB_ENV

      - name: Check initial disk space
        run: |
          echo "=== Initial Disk Usage ==="
          df -h
          echo "=== Target directory size ==="
          du -sh target/ 2>/dev/null || echo "No target directory yet"

      - name: Clean up disk space
        run: |
          # Remove unnecessary packages to free space
          sudo apt-get clean
          sudo apt-get autoremove -y

          # Remove unnecessary Docker images and containers
          docker system prune -af 2>/dev/null || true

          # Clean any existing criterion data
          rm -rf target/criterion 2>/dev/null || true

          echo "=== Disk space after cleanup ==="
          df -h

      - name: Create baseline directory
        run: mkdir -p target/performance-baselines

      - name: Build CLI tools
        run: |
          # Use minimal profile for CI builds to save disk space
          export CARGO_PROFILE_RELEASE_DEBUG=false
          export CARGO_PROFILE_RELEASE_STRIP=true
          cargo build --release -p skreaver-cli

          # Clean build artifacts we don't need
          find target/release -name "*.rlib" -delete 2>/dev/null || true
          find target/release -name "*.rmeta" -delete 2>/dev/null || true

      - name: Run performance regression detection
        id: regression_check
        run: |
          # Set environment variables for configuration
          export SKREAVER_COMMIT_HASH="${{ github.sha }}"
          export SKREAVER_BRANCH="${{ github.ref_name }}"
          export SKREAVER_CI_RUN_ID="${{ github.run_id }}"

          # Configure Criterion to minimize disk usage
          export CRITERION_OUTPUT_DIRECTORY="target/criterion-minimal"
          export CRITERION_DISABLE_HTML=1
          export CRITERION_DISABLE_GNUPLOT=1

          # Monitor disk space during execution
          echo "=== Disk space before benchmarks ==="
          df -h

          # Use the Rust CLI for CI-friendly performance analysis
          cargo run --release -p skreaver-cli -- perf ci

          echo "=== Disk space after benchmarks ==="
          df -h

      - name: Clean up benchmark artifacts
        run: |
          # Clean up large criterion files but keep essential data
          find target/criterion* -name "*.png" -delete 2>/dev/null || true
          find target/criterion* -name "*.svg" -delete 2>/dev/null || true
          find target/criterion* -name "raw.csv" -delete 2>/dev/null || true
          find target/criterion* -name "sample.json" -delete 2>/dev/null || true

          # Clean up build dependencies we don't need anymore
          rm -rf target/release/deps 2>/dev/null || true
          rm -rf target/release/build 2>/dev/null || true

          # Compress large log files
          find target -name "*.log" -size +1M -exec gzip {} \; 2>/dev/null || true

          echo "=== Disk space after cleanup ==="
          df -h

      - name: Save performance baselines
        if: steps.regression_check.outputs.baseline_updated == 'true'
        uses: actions/cache/save@v4
        with:
          path: target/performance-baselines
          key: perf-baselines-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_id }}

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.run_id }}
          path: |
            target/benchmark_output.txt
            target/benchmark_results.json
            target/performance_report.md
            target/performance-baselines/
          retention-days: 30

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'target/performance_report.md';

            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } else {
              console.log('No performance report found to comment');
            }

      - name: Fail on performance regression
        if: steps.regression_check.outputs.regression_detected == 'true' && steps.regression_check.outputs.should_fail_on_regression == 'true'
        run: |
          echo "🚨 Performance regression detected!"
          echo "Found ${{ steps.regression_check.outputs.regression_count }} performance regressions."
          echo "Please review the performance report and optimize the affected code paths."
          echo ""
          echo "Performance targets:"
          echo "- P50: ≤ 30ms"
          echo "- P95: ≤ 200ms"
          echo "- P99: ≤ 400ms"
          echo ""
          echo "Regression thresholds:"
          echo "- Mean: 10% increase"
          echo "- P95: 15% increase"
          echo "- P99: 20% increase"
          exit 1

      - name: Print sccache stats
        run: sccache --show-stats

  # Final validation with optimized release build
  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [test, bench]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Configure sccache
        run: echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=mold" >> $GITHUB_ENV

      - name: Build release with all features
        run: cargo build --release --all-features

      - name: Print sccache final stats
        run: sccache --show-stats